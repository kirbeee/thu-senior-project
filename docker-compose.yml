version: "3.9"
services:
  db:
    image: postgres:14-alpine
    container_name: postgresql_db
    volumes:
      - postgresql_data:/var/lib/postgresql/data/  # 資料持久化 (可選)
    environment:
      POSTGRES_USER: your_db_user
      POSTGRES_PASSWORD: your_db_password
      POSTGRES_DB: thuHelper
    ports:
      - "5432:5432" # 開發階段可以映射端口方便本地端工具連線，生產環境可移除
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379" # 開發階段可以映射端口方便本地端工具連線，生產環境可移除
    volumes:
      - redis_data:/data # 資料持久化 (可選)
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: django_app
    build: ./backend  # 指定 Dockerfile 路徑
    command: sh -c "python manage.py migrate && gunicorn thuHelper.wsgi -b 0.0.0.0:8000" # 啟動 Django 伺服器 (需根據你的專案調整)
    volumes:
      - ./backend:/app  # 掛載程式碼方便開發時修改
      - static_volume:/app/staticfiles # 靜態資源 volume (可選)
      - media_volume:/app/mediafiles  # 媒體資源 volume (可選)
    ports:
      - "8000:8000" # 開發階段可以映射端口方便本地端測試 Django，生產環境可移除
    environment:
      POSTGRES_HOST: db # 使用 service name 'db' 作為主機名連線 PostgreSQL
      POSTGRES_DB: thuHelper
      POSTGRES_USER: your_db_user
      POSTGRES_PASSWORD: your_db_password
      REDIS_HOST: redis # 使用 service name 'redis' 作為主機名連線 Redis
      REDIS_PORT: 6379
      DEBUG: "True" # 開發模式 (生產環境請改為 "False")
      ALLOWED_HOSTS: "*" # 開發模式允許所有 Host (生產環境請設定具體 Host)
      # SECRET_KEY: "your_django_secret_key" # 生產環境請設定安全的 Secret Key (建議使用環境變數或 secrets 管理)
    depends_on:
      db:
        condition: service_healthy # 等待 PostgreSQL 健康檢查通過才啟動
      redis:
        condition: service_healthy # 等待 Redis 健康檢查通過才啟動

  frontend:
    container_name: nextjs_app
    build: ./frontend # 指定 Dockerfile 路徑
    ports:
      - "3000:3000" # 開發階段可以映射端口方便本地端測試 Next.js，生產環境可移除
    volumes:
      - ./frontend:/app # 掛載程式碼方便開發時修改
    environment:
      NODE_ENV: development # 開發模式 (生產環境請改為 production)
      NEXT_PUBLIC_API_BASE_URL: "http://localhost:8000" # 設定 API 請求基礎路徑 (透過 Nginx 反向代理)
    depends_on:
      backend:
        condition: service_started # 等待 Django 啟動即可 (不需健康檢查)

  nginx:
    container_name: nginx_server
    image: nginx:1.21-alpine
    ports:
      - "80:80"  # 將主機的 80 端口映射到 Nginx 的 80 端口 (HTTP)
      - "443:443" # 將主機的 443 端口映射到 Nginx 的 443 端口 (HTTPS，如果需要 SSL)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf # 掛載 Nginx 設定檔
      - static_volume:/var/www/static # 掛載 Django 靜態資源 (如果需要 Nginx 直接伺服靜態資源)
      - media_volume:/var/www/media  # 掛載 Django 媒體資源 (如果需要 Nginx 直接伺服媒體資源)
    depends_on:
      frontend:
        condition: service_started # 等待 Next.js 啟動
      backend:
        condition: service_started  # 等待 Django 啟動

volumes:
  postgresql_data:  # PostgreSQL 資料持久化 volume (可選)
  redis_data:       # Redis 資料持久化 volume (可選)
  static_volume:    # Django 靜態資源 volume (可選)
  media_volume:     # Django 媒體資源 volume (可選)